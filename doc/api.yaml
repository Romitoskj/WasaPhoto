openapi: 3.0.3

info:
  title: WasaPhoto | WASA Project 2022/2023
  description: |-
    Keep in touch with your friends by sharing photos of special moments, thanks
    to WASAPhoto! You can upload your photos directly from your PC, and they
    will be visible to everyone following you.
  version: "1"
  contact: 
    name: "Antonio Pietro Romito - mat. 1932500"
    email: "romito.1932500@studenti.uniroma1.it"
    url: "https://github.com/Romitoskj"

servers:
- url: http://localhost:3000

tags:
  - name: Stream
  - name: User Profiles
  - name: User Relationships
  - name: Photos
  - name: Photo Interactions
  - name: Session



paths:
  /session:
    post:
      tags:
        - Session
      operationId: doLogin
      summary: Logs in the user
      description: |-
        If the user does not exists, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      requestBody:
        description: User details.
        content:
          application/json:
            schema: { $ref: '#/components/schemas/username' }
              
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                description: User identifier
                type: object
                properties:
                  identifier: { $ref: '#/components/schemas/id' }
        '400': { $ref: '#/components/responses/400BadRequest' }
        '500': { $ref: '#/components/responses/500InternalServerError' }


  /users/:
    parameters:
      - name: query
        in: query
        required: true
        description: The searched username.
        schema: { $ref: '#/components/schemas/name' }
    get:
      security:
        - bearerAuth: [] 
      tags:
        - User Profiles
      operationId: searchUser
      summary: Search an user by username
      description: |-
        Return a list of users whose username match the given query string. 
      responses:
        '200': { $ref: '#/components/responses/200SearchUser' }
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '500': { $ref: '#/components/responses/500InternalServerError' }


  /users/{user}:
    parameters:
      - { $ref: '#/components/parameters/user' }
    get:
      security:
        - bearerAuth: [] 
      tags: 
        - User Profiles
      operationId: getUserProfile
      summary: Get the user profile page
      description: |-
        Return the user profile page of the specified user with its information
        (id, username, number of followers, number of following and number of
        photos uploaded) and photos in revers chronological order.
      responses: 
        '200': { $ref: '#/components/responses/200GetUserProfile' }
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '500': { $ref: '#/components/responses/500InternalServerError' }


  /users/{user}/username:
    parameters:
      - { $ref: '#/components/parameters/user' }
    put:
      security:
        - bearerAuth: [] 
      tags:
        - User Profiles
      operationId: setMyUsername
      summary: Update the username
      description: |-
        Update the username of the given user with the one provided in the
        request body.
      requestBody:
        description: The new username.
        content:
          application/json:
            schema: { $ref: '#/components/schemas/username' }
      responses: 
        '204': { $ref: '#/components/responses/204Update' }
        '400': { $ref: '#/components/responses/400BadRequest' }
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '403': { $ref: '#/components/responses/403Forbidden' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '500': { $ref: '#/components/responses/500InternalServerError' }


  /users/{user}/followers/:
    parameters:
      - { $ref: '#/components/parameters/user' }
    get:
      security:
        - bearerAuth: [] 
      tags:
        - User Relationships
      operationId: getFollowers
      summary: Get the list of followers
      description: |-
        Return the list of the users that follows the specified user.
      responses: 
        '200': { $ref: '#/components/responses/200Followers' }
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '500': { $ref: '#/components/responses/500InternalServerError' }

  
  /users/{user}/followers/{follower}:
    parameters:
      - { $ref: '#/components/parameters/user' }
      - { $ref: '#/components/parameters/follower' }
    put:
      security:
        - bearerAuth: [] 
      tags: 
        - User Relationships
      operationId: followUser
      summary: Follow an user
      description: |-
        Make the specified user (follower) follow another user (user). It adds
        the follower to the follower list of the user and the user to the 
        following list of the follower.
      responses: 
        '201': { $ref: '#/components/responses/201Follow' }
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '403': { $ref: '#/components/responses/403Forbidden' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '500': { $ref: '#/components/responses/500InternalServerError' }

    delete:
      security:
        - bearerAuth: [] 
      tags: 
        - User Relationships
      operationId: unfollowUser
      summary: Unfollow an user
      description: |-
        Make the specified user (follower) unfollow another user (user). It
        removes the follower from the follower list of the user and the user
        from the  following list of the follower.
      responses:
        '204': { $ref: '#/components/responses/204Delete' }
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '403': { $ref: '#/components/responses/403Forbidden' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '500': { $ref: '#/components/responses/500InternalServerError' }


  /users/{user}/following/:
    parameters:
      - { $ref: '#/components/parameters/user' }
    get:
      security:
        - bearerAuth: [] 
      tags:
        - User Relationships
      operationId: getFollowing
      summary: Get the list of following
      description: |-
        Return the list of the users that the specified user follows.
      responses: 
        '200': { $ref: '#/components/responses/200Following' }
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '500': { $ref: '#/components/responses/500InternalServerError' }


  /users/{user}/banned/{banned_user}:
    parameters:
      - { $ref: '#/components/parameters/user' }
      - { $ref: '#/components/parameters/banned_user' }
    put:
      security:
        - bearerAuth: [] 
      tags:
        - User Relationships
      operationId: banUser
      summary: Ban an user
      description: Ban an user (banned_user) for another user (user).
      responses:
        '201': { $ref: '#/components/responses/201Ban' }
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '403': { $ref: '#/components/responses/403Forbidden' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '500': { $ref: '#/components/responses/500InternalServerError' }

    delete:
      security:
        - bearerAuth: [] 
      tags:
        - User Relationships
      operationId: unbanUser
      summary: Unban an user
      description: Unban an user (banned_user) for another user (user).
      responses: 
        '204': { $ref: '#/components/responses/204Delete' }
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '403': { $ref: '#/components/responses/403Forbidden' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '500': { $ref: '#/components/responses/500InternalServerError' }


  /users/{user}/photos/:
    parameters:
      - { $ref: '#/components/parameters/user' }
    get:
      security:
        - bearerAuth: [] 
      tags: 
        - Photos
      operationId: getUserPhotos
      summary: Get all the photos uploaded by an user
      description: |-
        Return a list containing all the photo of the provided user in reverse
        chronological order.
      responses: 
        '200': { $ref: '#/components/responses/200Photos' }
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '500': { $ref: '#/components/responses/500InternalServerError' }

    post:
      security:
        - bearerAuth: [] 
      tags: 
        - Photos
      operationId: uploadPhoto
      summary: Upload a photo
      description: Upload a photo on the profile of the provided user.
      requestBody:
        description: The image file to upload.
        content:
          image/jpeg:
            schema: { $ref: '#/components/schemas/image' } 
      responses: 
        '201': { $ref: '#/components/responses/201Photo' }
        '400': { $ref: '#/components/responses/400BadRequest' }
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '403': { $ref: '#/components/responses/403Forbidden' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '500': { $ref: '#/components/responses/500InternalServerError' }


  /users/{user}/photos/{photo}:
    parameters:
      - { $ref: '#/components/parameters/user' }
      - { $ref: '#/components/parameters/photo' }
    get: 
      security:
        - bearerAuth: [] 
      tags: 
        - Photos
      operationId: getPhoto
      summary: Get a specific photo of an user
      description: |-
        Return the jpeg file of the specified photo of the provided user.
      responses: 
        '200': { $ref: '#/components/responses/200Photo' }
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '500': { $ref: '#/components/responses/500InternalServerError' }

    delete:
      security:
        - bearerAuth: [] 
      tags: 
        - Photos
      operationId: deletePhoto
      summary: Delete a photo
      description: Delete the specified photo of the provided user.
      responses: 
        '204': { $ref: '#/components/responses/204Delete' }
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '403': { $ref: '#/components/responses/403Forbidden' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '500': { $ref: '#/components/responses/500InternalServerError' }


  /users/{user}/photos/{photo}/likes/:
    parameters:
      - { $ref: '#/components/parameters/user' }
      - { $ref: '#/components/parameters/photo' }
    get:
      security:
        - bearerAuth: [] 
      tags:
        - Photo Interactions
      operationId: getLikers
      responses: 
        
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '500': { $ref: '#/components/responses/500InternalServerError' }
    

  /users/{user}/photos/{photo}/likes/{liker}:
    parameters:
      - { $ref: '#/components/parameters/user' }
      - { $ref: '#/components/parameters/photo' }
      - { $ref: '#/components/parameters/liker' }
    put:
      security:
        - bearerAuth: [] 
      tags:
        - Photo Interactions
      operationId: likePhoto
      responses: 
        
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '403': { $ref: '#/components/responses/403Forbidden' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '500': { $ref: '#/components/responses/500InternalServerError' }

    delete:
      security:
        - bearerAuth: [] 
      tags:
        - Photo Interactions
      operationId: unlikePhoto
      responses:

        '401': { $ref: '#/components/responses/401Unauthorized' }
        '403': { $ref: '#/components/responses/403Forbidden' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '500': { $ref: '#/components/responses/500InternalServerError' }


  /users/{user}/photos/{photo}/comments/:
    parameters:
      - { $ref: '#/components/parameters/user' }
      - { $ref: '#/components/parameters/photo' }
    get:
      security:
        - bearerAuth: [] 
      tags:
        - Photo Interactions
      operationId: getComments
      responses: 
        
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '500': { $ref: '#/components/responses/500InternalServerError' }

    post:
      security:
        - bearerAuth: [] 
      tags:
        - Photo Interactions
      operationId: commentPhoto
      responses: 
        
        '400': { $ref: '#/components/responses/400BadRequest' }
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '500': { $ref: '#/components/responses/500InternalServerError' }


  /users/{user}/photos/{photo}/comments/{comment}:
    parameters:
      - { $ref: '#/components/parameters/user' }
      - { $ref: '#/components/parameters/photo' }
      - { $ref: '#/components/parameters/comment' }
    delete:
      security:
        - bearerAuth: [] 
      tags:
        - Photo Interactions
      operationId: uncommentPhoto
      responses: 
        
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '403': { $ref: '#/components/responses/403Forbidden' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '500': { $ref: '#/components/responses/500InternalServerError' }


  /users/{user}/stream:
    parameters:
      - { $ref: '#/components/parameters/user' }
    get:
      security:
        - bearerAuth: [] 
      tags:
        - Stream
      operationId: getMyStream
      responses: 
        
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '403': { $ref: '#/components/responses/403Forbidden' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '500': { $ref: '#/components/responses/500InternalServerError' }


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

  schemas:

    name:
      type: string
      example: Maria
      pattern: '^.*?$'
      minLength: 3
      maxLength: 16

    username:
      title: Username
      description: This object represents the username chosen by an user.
      type: object
      properties: 
        name: { $ref: '#/components/schemas/name' }
        
    id:
      type: integer
      example: 123

    other_id: 
      type: integer
      example: 456

    user:
      title: User
      description: This object represents a single user.
      type: object
      properties:
        identifier: { $ref: '#/components/schemas/id' }
        name: { $ref: '#/components/schemas/name' }
        
    users:
      title: Users
      description: List of user objects.
      type: array
      items: { $ref: '#/components/schemas/user' }

    photo:
      title: Photo
      description: This object represents a single photo.
      type: object
      properties:
        identifier:  { $ref: '#/components/schemas/id' }
        creator: { $ref: '#/components/schemas/name' }
        created_at:
          type: string
          format: date-time
          example: "2023-08-29T09:11:30.133Z"
          description: Upload date and time.
        likes:
          type: integer
          example: 100
          description: Likes count.
        comments:
          type: integer
          example: 20
          description: Comments count.
    image:
      title: Image
      description: This object represents the image file of a photo.
      type: string
      format: binary
        
    photos:
      title: Photos
      description: List of photos objects in revers chronological order.
      type: array
      items: { $ref: '#/components/schemas/photo' }

    profile:
      title: Profile
      description: This object represents a profile page of a single user.
      type: object
      properties:
        user: { $ref: '#/components/schemas/user' }
        photos_n:
          description: Number of photos uploaded.
          type: integer
          example: 15
        followers_n:
          description: Number of follower of the user.
          type: integer
          example: 1000
        following_n:
          description: Number of accounts that the user follows.
          type: integer
          example: 1000
        photos: { $ref: '#/components/schemas/photos' }



  parameters:
    user:
      name: user
      in: path
      required: true
      description: The user identifier.
      schema: { $ref: '#/components/schemas/id' }
      
    follower:
      name: follower
      in: path
      required: true
      description: The follower identifier.
      schema: { $ref: '#/components/schemas/other_id' }
      
    banned_user:
      name: banned_user
      in: path
      required: true
      description: The banned user identifier.
      schema: { $ref: '#/components/schemas/other_id' }
      
    photo:
      name: photo
      in: path
      required: true
      description: The photo identifier.
      schema: { $ref: '#/components/schemas/id' }
            
    liker:
      name: liker
      in: path
      required: true
      description: The identifier of the user that likes the photo.
      schema: { $ref: '#/components/schemas/id' }
      
    comment:
      name: comment
      in: path
      required: true
      description: The comment identifier.
      schema: { $ref: '#/components/schemas/id' }


  responses:
              
    200SearchUser:
      description: List of users.
      content:
        application/json:
          schema: { $ref: '#/components/schemas/users' }

    200GetUserProfile:
      description: User profile page.
      content:
        application/json:
          schema: { $ref: '#/components/schemas/profile' }
              
    200Followers:
      description: List of followers.
      content:
        application/json:
          schema: { $ref: '#/components/schemas/users' }
              
    200Following:
      description: List of following.
      content:
        application/json:
          schema: { $ref: '#/components/schemas/users' }
              
    200Photos:
      description: List of photos in reverse chronological order.
      content:
        application/json:
          schema: { $ref: '#/components/schemas/photos' }
              
    200Photo:
      description: A single photo.
      content:
        image/jpeg:
          schema: { $ref: '#/components/schemas/image' }
              
    201Follow:
      description: The resource has been created.
      content:
        application/json:
          schema:
            title: Follow
            type: object
            description: Following relationships.
            properties:
              user: { $ref: '#/components/schemas/id' }
              follower: { $ref: '#/components/schemas/other_id' }
              
    201Ban:
      description: The resource has been created.
      content:
        application/json:
          schema:
            title: Ban
            type: object
            description: Ban relationships.
            properties:
              user: { $ref: '#/components/schemas/id' }
              banned_user: { $ref: '#/components/schemas/other_id' }
    
    201Photo:
      description: The photo has been uploaded.
      content:
        application/json:
          schema: { $ref: '#/components/schemas/photo' }
          
    204Update:
      description: The resource has been updated.
          
    204Delete:
      description: The resource has been deleted.


    400BadRequest:
      description: The request is not valid.
      content: 
        application/json: 
          schema: 
            title: Error
            type: object
            description: Error message.
            properties:
              error:
                type: string
                description: The message.
                example: The request body is not valid.

    401Unauthorized:
      description: Authentication ID is missing or invalid.
      content: 
        application/json: 
          schema: 
            title: Error
            type: object
            description: Error message.
            properties:
              error:
                type: string
                description: The message.
                example: Authentication ID is missing or invalid.
    
    403Forbidden:
      description: |-
        Action proibithed when performing an operation without permission.
      content: 
        application/json: 
          schema: 
            title: Error
            type: object
            description: Error message.
            properties:
              error:
                type: string
                description: The message.
                example: This resource belongs to someone else.
    
    404NotFound:
      description: Resource not found.
      content: 
        application/json: 
          schema: 
            title: Error
            type: object
            description: Error message.
            properties:
              error:
                type: string
                description: The message.
                example: Resource not found.
    

    500InternalServerError:
      description: Internal server error.
      content: 
        application/json: 
          schema: 
            title: Error
            type: object
            description: Error message.
            properties:
              error:
                type: string
                description: The message.
                example: Internal server error.
