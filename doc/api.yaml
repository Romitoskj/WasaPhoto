openapi: 3.0.3

info:
  title: WasaPhoto | WASA Project 2022/2023
  description: |-
    Keep in touch with your friends by sharing photos of special moments, thanks to WASAPhoto! You can
    upload your photos directly from your PC, and they will be visible to everyone following you.
  version: "1"
  contact: 
    name: "Antonio Pietro Romito - mat. 1932500"
    email: "romito.1932500@studenti.uniroma1.it"
    url: "https://github.com/Romitoskj"

tags:
  - name: Stream
  - name: User Profiles
  - name: User Relationships
  - name: Photos
  - name: Photo Interactions
  - name: Session



paths:
  /session:
    post:
      tags:
        - Session
      operationId: doLogin
      summary: Logs in the user
      description: |-
        If the user does not exists, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      requestBody:
        description: User details
        content:
          application/json:
            schema: { $ref: '#/components/schemas/username' }
              
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:        
                type: object
                properties:
                  identifier: { $ref: '#/components/schemas/id' }
        '400': { $ref: '#/components/responses/400BadRequest' }
        '500': { $ref: '#/components/responses/500InternalServerError' }


  /users/:
    parameters:
      - name: query
        in: query
        required: true
        description: The searched username.
        schema: { $ref: '#/components/schemas/name' }
    get:
      security:
        - bearerAuth: [] 
      tags:
        - User Profiles
      operationId: searchUser
      responses: 
        
        
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '500': { $ref: '#/components/responses/500InternalServerError' }


  /users/{user}:
    parameters:
      - { $ref: '#/components/parameters/user' }
    get:
      security:
        - bearerAuth: [] 
      tags: 
        - User Profiles
      operationId: getUserProfile
      responses: 
        
        
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '500': { $ref: '#/components/responses/500InternalServerError' }


  /users/{user}/username:
    parameters:
      - { $ref: '#/components/parameters/user' }
    put:
      security:
        - bearerAuth: [] 
      tags:
        - User Profiles
      operationId: setMyUsername
      responses: 
        
        
        '400': { $ref: '#/components/responses/400BadRequest' }
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '403': { $ref: '#/components/responses/403Forbidden' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '500': { $ref: '#/components/responses/500InternalServerError' }


  /users/{user}/followers/:
    parameters:
      - { $ref: '#/components/parameters/user' }
    get:
      security:
        - bearerAuth: [] 
      tags:
        - User Relationships
      operationId: getFollowers
      responses: 
        
        
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '500': { $ref: '#/components/responses/500InternalServerError' }

  
  /users/{user}/followers/{follower}:
    parameters:
      - { $ref: '#/components/parameters/user' }
      - { $ref: '#/components/parameters/follower' }
    put:
      security:
        - bearerAuth: [] 
      tags: 
        - User Relationships
      operationId: followUser
      responses: 
        
        '400': { $ref: '#/components/responses/400BadRequest' }
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '403': { $ref: '#/components/responses/403Forbidden' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '500': { $ref: '#/components/responses/500InternalServerError' }

    delete:
      security:
        - bearerAuth: [] 
      tags: 
        - User Relationships
      operationId: unfollowUser
      responses:
        
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '403': { $ref: '#/components/responses/403Forbidden' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '500': { $ref: '#/components/responses/500InternalServerError' }


  /users/{user}/following/:
    parameters:
      - { $ref: '#/components/parameters/user' }
    get:
      security:
        - bearerAuth: [] 
      tags:
        - User Relationships
      operationId: getFollowing
      responses: 
        
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '500': { $ref: '#/components/responses/500InternalServerError' }


  /users/{user}/banned/{banned_user}:
    parameters:
      - { $ref: '#/components/parameters/user' }
      - { $ref: '#/components/parameters/banned_user' }
    put:
      security:
        - bearerAuth: [] 
      tags:
        - User Relationships
      operationId: banUser
      responses:
        
        '400': { $ref: '#/components/responses/400BadRequest' }
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '403': { $ref: '#/components/responses/403Forbidden' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '500': { $ref: '#/components/responses/500InternalServerError' }

    delete:
      security:
        - bearerAuth: [] 
      tags:
        - User Relationships
      operationId: unbanUser
      responses: 
        
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '403': { $ref: '#/components/responses/403Forbidden' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '500': { $ref: '#/components/responses/500InternalServerError' }


  /users/{user}/photos/:
    parameters:
      - { $ref: '#/components/parameters/user' }
    get:
      security:
        - bearerAuth: [] 
      tags: 
        - Photos
      operationId: getUserPhotos
      responses: 
        
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '500': { $ref: '#/components/responses/500InternalServerError' }

    post:
      security:
        - bearerAuth: [] 
      tags: 
        - Photos
      operationId: uploadPhoto
      responses: 
        
        '400': { $ref: '#/components/responses/400BadRequest' }
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '403': { $ref: '#/components/responses/403Forbidden' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '500': { $ref: '#/components/responses/500InternalServerError' }


  /users/{user}/photos/{photo}:
    parameters:
      - { $ref: '#/components/parameters/user' }
      - { $ref: '#/components/parameters/photo' }
    get: 
      security:
        - bearerAuth: [] 
      tags: 
        - Photos
      operationId: getPhoto
      responses: 
        
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '500': { $ref: '#/components/responses/500InternalServerError' }

    delete:
      security:
        - bearerAuth: [] 
      tags: 
        - Photos
      operationId: deletePhoto
      responses: 
        
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '403': { $ref: '#/components/responses/403Forbidden' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '500': { $ref: '#/components/responses/500InternalServerError' }


  /users/{user}/photos/{photo}/likes/:
    parameters:
      - { $ref: '#/components/parameters/user' }
      - { $ref: '#/components/parameters/photo' }
    get:
      security:
        - bearerAuth: [] 
      tags:
        - Photo Interactions
      operationId: getLikers
      responses: 
        
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '500': { $ref: '#/components/responses/500InternalServerError' }
    

  /users/{user}/photos/{photo}/likes/{liker}:
    parameters:
      - { $ref: '#/components/parameters/user' }
      - { $ref: '#/components/parameters/photo' }
      - { $ref: '#/components/parameters/liker' }
    put:
      security:
        - bearerAuth: [] 
      tags:
        - Photo Interactions
      operationId: likePhoto
      responses: 
        
        '400': { $ref: '#/components/responses/400BadRequest' }
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '403': { $ref: '#/components/responses/403Forbidden' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '500': { $ref: '#/components/responses/500InternalServerError' }

    delete:
      security:
        - bearerAuth: [] 
      tags:
        - Photo Interactions
      operationId: unlikePhoto
      responses:

        '400': { $ref: '#/components/responses/400BadRequest' }
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '403': { $ref: '#/components/responses/403Forbidden' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '500': { $ref: '#/components/responses/500InternalServerError' }


  /users/{user}/photos/{photo}/comments/:
    parameters:
      - { $ref: '#/components/parameters/user' }
      - { $ref: '#/components/parameters/photo' }
    get:
      security:
        - bearerAuth: [] 
      tags:
        - Photo Interactions
      operationId: getComments
      responses: 
        
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '500': { $ref: '#/components/responses/500InternalServerError' }

    post:
      security:
        - bearerAuth: [] 
      tags:
        - Photo Interactions
      operationId: commentPhoto
      responses: 
        
        '400': { $ref: '#/components/responses/400BadRequest' }
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '500': { $ref: '#/components/responses/500InternalServerError' }


  /users/{user}/photos/{photo}/comments/{comment}:
    parameters:
      - { $ref: '#/components/parameters/user' }
      - { $ref: '#/components/parameters/photo' }
      - { $ref: '#/components/parameters/comment' }
    delete:
      security:
        - bearerAuth: [] 
      tags:
        - Photo Interactions
      operationId: uncommentPhoto
      responses: 
        
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '403': { $ref: '#/components/responses/403Forbidden' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '500': { $ref: '#/components/responses/500InternalServerError' }


  /users/{user}/stream:
    parameters:
      - { $ref: '#/components/parameters/user' }
    get:
      security:
        - bearerAuth: [] 
      tags:
        - Stream
      operationId: getMyStream
      responses: 
        
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '403': { $ref: '#/components/responses/403Forbidden' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '500': { $ref: '#/components/responses/500InternalServerError' }


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

  schemas:

    name:
      type: string
      example: Maria
      pattern: '^.*?$'
      minLength: 3
      maxLength: 16

    username:
      title: Username
      type: object
      properties: 
        name: { $ref: '#/components/schemas/name' }
        
    id:
      type: integer
      example: 123


  parameters:
    user:
      name: user
      in: path
      required: true
      description: The user identifier.
      schema: { $ref: '#/components/schemas/id' }
      
    follower:
      name: follower
      in: path
      required: true
      description: The follower identifier.
      schema: { $ref: '#/components/schemas/id' }
      
    banned_user:
      name: banned_user
      in: path
      required: true
      description: The banned user identifier.
      schema: { $ref: '#/components/schemas/id' }
      
    photo:
      name: photo
      in: path
      required: true
      description: The photo identifier.
      schema: { $ref: '#/components/schemas/id' }
      
    liker:
      name: liker
      in: path
      required: true
      description: The identifier of the user that likes the photo.
      schema: { $ref: '#/components/schemas/id' }
      
    comment:
      name: comment
      in: path
      required: true
      description: The comment identifier.
      schema: { $ref: '#/components/schemas/id' }


  responses:
    400BadRequest:
      description: The request is not valid.
      content: 
        application/json: 
          schema: 
            title: Error
            type: object
            description: Error message
            properties:
              Error:
                type: string
                description: The message
                example: The request body is not valid.
    401Unauthorized:
      description: Authentication ID is missing or invalid.
      content: 
        application/json: 
          schema: 
            title: Error
            type: object
            description: Error message
            properties:
              Error:
                type: string
                description: The message
                example: Authentication ID is missing or invalid.
    403Forbidden:
      description: Action proibithed when performing an operation without permission.
      content: 
        application/json: 
          schema: 
            title: Error
            type: object
            description: Error message
            properties:
              Error:
                type: string
                description: The message
                example: The logged user does not have permissions to access this resource because it belong to someone else.
    404NotFound:
      description: Resource not found.
      content: 
        application/json: 
          schema: 
            title: Error
            type: object
            description: Error message
            properties:
              Error:
                type: string
                description: The message
                example: Resource not found.
    500InternalServerError:
      description: Internal server error.
      content: 
        application/json: 
          schema: 
            title: Error
            type: object
            description: Error message
            properties:
              Error:
                type: string
                description: The message
                example: Internal server error.
              
